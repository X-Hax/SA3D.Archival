abstract SA3D.Archival.Archive.Entries.get -> System.Collections.Generic.IReadOnlyList<SA3D.Archival.ArchiveEntry!>!
abstract SA3D.Archival.Archive.WriteArchive(SA3D.Common.IO.EndianStackWriter! writer) -> void
abstract SA3D.Archival.Archive.WriteContentIndex(System.IO.TextWriter! writer) -> void
abstract SA3D.Archival.Tex.TextureArchive.TextureEntries.get -> System.Collections.Generic.IReadOnlyList<SA3D.Archival.Tex.TextureArchiveEntry!>!
abstract SA3D.Archival.Tex.TextureArchiveEntry.InternalGetMipmap(int mipmapIndex) -> SA3D.Texturing.Texture!
const SA3D.Archival.PAK.PAKTextureInfo.StructSize = 60 -> uint
override SA3D.Archival.ArchiveEntry.ToString() -> string!
override SA3D.Archival.PAK.PAKArchive.Entries.get -> System.Collections.Generic.IReadOnlyList<SA3D.Archival.ArchiveEntry!>!
override SA3D.Archival.PAK.PAKArchive.ToTextureSet() -> SA3D.Texturing.TextureSet!
override SA3D.Archival.PAK.PAKArchive.WriteArchive(SA3D.Common.IO.EndianStackWriter! writer) -> void
override SA3D.Archival.PAK.PAKArchive.WriteContentIndex(System.IO.TextWriter! writer) -> void
override SA3D.Archival.PAK.PAKTextureInfo.ToString() -> string!
override SA3D.Archival.Tex.GV.GVM.TextureEntries.get -> System.Collections.Generic.IReadOnlyList<SA3D.Archival.Tex.TextureArchiveEntry!>!
override SA3D.Archival.Tex.GV.GVM.ToTextureSet() -> SA3D.Texturing.TextureSet!
override SA3D.Archival.Tex.GV.GVM.WriteArchive(SA3D.Common.IO.EndianStackWriter! writer) -> void
override SA3D.Archival.Tex.GV.GVM.WriteContentIndex(System.IO.TextWriter! writer) -> void
override SA3D.Archival.Tex.GV.GVR.HasMipMaps.get -> bool
override SA3D.Archival.Tex.GV.GVR.Index4.get -> bool?
override SA3D.Archival.Tex.GV.GVR.ToString() -> string!
override SA3D.Archival.Tex.GV.GVR.ToTexture() -> SA3D.Texturing.Texture!
override SA3D.Archival.Tex.PV.PVM.TextureEntries.get -> System.Collections.Generic.IReadOnlyList<SA3D.Archival.Tex.TextureArchiveEntry!>!
override SA3D.Archival.Tex.PV.PVM.ToTextureSet() -> SA3D.Texturing.TextureSet!
override SA3D.Archival.Tex.PV.PVM.WriteArchive(SA3D.Common.IO.EndianStackWriter! writer) -> void
override SA3D.Archival.Tex.PV.PVM.WriteContentIndex(System.IO.TextWriter! writer) -> void
override SA3D.Archival.Tex.PV.PVR.HasMipMaps.get -> bool
override SA3D.Archival.Tex.PV.PVR.Index4.get -> bool?
override SA3D.Archival.Tex.PV.PVR.ToString() -> string!
override SA3D.Archival.Tex.PV.PVR.ToTexture() -> SA3D.Texturing.Texture!
override SA3D.Archival.Tex.PVX.PVMX.TextureEntries.get -> System.Collections.Generic.IReadOnlyList<SA3D.Archival.Tex.TextureArchiveEntry!>!
override SA3D.Archival.Tex.PVX.PVMX.WriteArchive(SA3D.Common.IO.EndianStackWriter! writer) -> void
override SA3D.Archival.Tex.PVX.PVMX.WriteContentIndex(System.IO.TextWriter! writer) -> void
override SA3D.Archival.Tex.PVX.PVRX.ToTexture() -> SA3D.Texturing.Texture!
override SA3D.Archival.Tex.TextureArchiveEntry.ToString() -> string!
override sealed SA3D.Archival.Tex.TextureArchive.Entries.get -> System.Collections.Generic.IReadOnlyList<SA3D.Archival.ArchiveEntry!>!
SA3D.Archival.Archive
SA3D.Archival.Archive.Archive() -> void
SA3D.Archival.Archive.WireContentIndexToLines() -> string!
SA3D.Archival.Archive.WriteArchive(System.IO.Stream! stream) -> void
SA3D.Archival.Archive.WriteArchiveToBytes() -> byte[]!
SA3D.Archival.Archive.WriteArchiveToFile(string! outputFile) -> void
SA3D.Archival.Archive.WriteContentIndexToFile(string! filepath) -> void
SA3D.Archival.ArchiveEntry
SA3D.Archival.ArchiveEntry.ArchiveEntry(byte[]! data, string! name) -> void
SA3D.Archival.ArchiveEntry.CreateDataReader() -> SA3D.Common.IO.EndianStackReader!
SA3D.Archival.ArchiveEntry.Name.get -> string!
SA3D.Archival.ArchiveEntry.Name.set -> void
SA3D.Archival.InvalidArchiveException
SA3D.Archival.InvalidArchiveException.InvalidArchiveException(string! msg) -> void
SA3D.Archival.PAK.PAKArchive
SA3D.Archival.PAK.PAKArchive.FolderName.get -> string!
SA3D.Archival.PAK.PAKArchive.FolderName.set -> void
SA3D.Archival.PAK.PAKArchive.PAKArchive() -> void
SA3D.Archival.PAK.PAKArchive.PAKArchive(string! folderName) -> void
SA3D.Archival.PAK.PAKArchive.PAKEntries.get -> System.Collections.Generic.List<SA3D.Archival.PAK.PAKEntry!>!
SA3D.Archival.PAK.PAKEntry
SA3D.Archival.PAK.PAKEntry.LongPath.get -> string!
SA3D.Archival.PAK.PAKEntry.LongPath.set -> void
SA3D.Archival.PAK.PAKEntry.PAKEntry(byte[]! data, string! name, string! longPath) -> void
SA3D.Archival.PAK.PAKTextureAttributes
SA3D.Archival.PAK.PAKTextureAttributes.Mipmapped = 2147483648 -> SA3D.Archival.PAK.PAKTextureAttributes
SA3D.Archival.PAK.PAKTextureAttributes.NotTwiddled = 67108864 -> SA3D.Archival.PAK.PAKTextureAttributes
SA3D.Archival.PAK.PAKTextureAttributes.Palettized = 32768 -> SA3D.Archival.PAK.PAKTextureAttributes
SA3D.Archival.PAK.PAKTextureAttributes.Stride = 33554432 -> SA3D.Archival.PAK.PAKTextureAttributes
SA3D.Archival.PAK.PAKTextureAttributes.VQ = 1073741824 -> SA3D.Archival.PAK.PAKTextureAttributes
SA3D.Archival.PAK.PAKTextureInfo
SA3D.Archival.PAK.PAKTextureInfo.Attributes.get -> SA3D.Archival.PAK.PAKTextureAttributes
SA3D.Archival.PAK.PAKTextureInfo.Attributes.set -> void
SA3D.Archival.PAK.PAKTextureInfo.BitDepth.get -> uint
SA3D.Archival.PAK.PAKTextureInfo.BitDepth.set -> void
SA3D.Archival.PAK.PAKTextureInfo.DataSize.get -> uint
SA3D.Archival.PAK.PAKTextureInfo.DataSize.set -> void
SA3D.Archival.PAK.PAKTextureInfo.GlobalIndex.get -> uint
SA3D.Archival.PAK.PAKTextureInfo.GlobalIndex.set -> void
SA3D.Archival.PAK.PAKTextureInfo.Height.get -> uint
SA3D.Archival.PAK.PAKTextureInfo.Height.set -> void
SA3D.Archival.PAK.PAKTextureInfo.Name.get -> string!
SA3D.Archival.PAK.PAKTextureInfo.Name.set -> void
SA3D.Archival.PAK.PAKTextureInfo.PAKTextureInfo() -> void
SA3D.Archival.PAK.PAKTextureInfo.PAKTextureInfo(string! name, uint globalIndex, SA3D.Archival.Tex.GV.GVRPixelFormat type, uint bitDepth, SA3D.Archival.Tex.GV.GVRPixelFormat pixelFormat, uint width, uint height, uint dataSize, SA3D.Archival.PAK.PAKTextureAttributes attributes) -> void
SA3D.Archival.PAK.PAKTextureInfo.PixelFormat.get -> SA3D.Archival.Tex.GV.GVRPixelFormat
SA3D.Archival.PAK.PAKTextureInfo.PixelFormat.set -> void
SA3D.Archival.PAK.PAKTextureInfo.Type.get -> SA3D.Archival.Tex.GV.GVRPixelFormat
SA3D.Archival.PAK.PAKTextureInfo.Type.set -> void
SA3D.Archival.PAK.PAKTextureInfo.Width.get -> uint
SA3D.Archival.PAK.PAKTextureInfo.Width.set -> void
SA3D.Archival.PAK.PAKTextureInfo.Write(SA3D.Common.IO.EndianStackWriter! writer) -> void
SA3D.Archival.PRS
SA3D.Archival.Tex.GV.GVM
SA3D.Archival.Tex.GV.GVM.Comment.get -> string!
SA3D.Archival.Tex.GV.GVM.Comment.set -> void
SA3D.Archival.Tex.GV.GVM.ConverterName.get -> string!
SA3D.Archival.Tex.GV.GVM.ConverterName.set -> void
SA3D.Archival.Tex.GV.GVM.ExportGVPsAsFiles(string! folderPath) -> void
SA3D.Archival.Tex.GV.GVM.ExportGVRsAsFiles(string! folderPath, bool includeGlobalIndices) -> void
SA3D.Archival.Tex.GV.GVM.GVM() -> void
SA3D.Archival.Tex.GV.GVM.GVPs.get -> System.Collections.Generic.List<SA3D.Archival.Tex.GV.GVP!>!
SA3D.Archival.Tex.GV.GVM.GVRs.get -> System.Collections.Generic.List<SA3D.Archival.Tex.GV.GVR!>!
SA3D.Archival.Tex.GV.GVM.ModelNames.get -> System.Collections.Generic.List<string!>!
SA3D.Archival.Tex.GV.GVM.WriteGVM(SA3D.Common.IO.EndianStackWriter! writer) -> void
SA3D.Archival.Tex.GV.GVM.WriteGVM(SA3D.Common.IO.EndianStackWriter! writer, SA3D.Archival.Tex.GV.GVMMetadataIncludes includes) -> void
SA3D.Archival.Tex.GV.GVM.WriteGVM(System.IO.Stream! stream) -> void
SA3D.Archival.Tex.GV.GVM.WriteGVM(System.IO.Stream! stream, SA3D.Archival.Tex.GV.GVMMetadataIncludes includes) -> void
SA3D.Archival.Tex.GV.GVM.WriteGVMToByte() -> byte[]!
SA3D.Archival.Tex.GV.GVM.WriteGVMToBytes(SA3D.Archival.Tex.GV.GVMMetadataIncludes includes) -> byte[]!
SA3D.Archival.Tex.GV.GVM.WriteGVMToFile(string! filepath) -> void
SA3D.Archival.Tex.GV.GVM.WriteGVMToFile(string! filepath, SA3D.Archival.Tex.GV.GVMMetadataIncludes includes) -> void
SA3D.Archival.Tex.GV.GVMMetadataIncludes
SA3D.Archival.Tex.GV.GVMMetadataIncludes.GVMMetadataIncludes() -> void
SA3D.Archival.Tex.GV.GVMMetadataIncludes.IncludeCategoryCodes.get -> bool
SA3D.Archival.Tex.GV.GVMMetadataIncludes.IncludeCategoryCodes.set -> void
SA3D.Archival.Tex.GV.GVMMetadataIncludes.IncludeEntryInfo.get -> bool
SA3D.Archival.Tex.GV.GVMMetadataIncludes.IncludeEntryInfo.set -> void
SA3D.Archival.Tex.GV.GVMMetadataIncludes.IncludeGlobalIndices.get -> bool
SA3D.Archival.Tex.GV.GVMMetadataIncludes.IncludeGlobalIndices.set -> void
SA3D.Archival.Tex.GV.GVMMetadataIncludes.IncludeNames.get -> bool
SA3D.Archival.Tex.GV.GVMMetadataIncludes.IncludeNames.set -> void
SA3D.Archival.Tex.GV.GVMMetaEntryAttributes
SA3D.Archival.Tex.GV.GVMMetaEntryAttributes.AlphaDither = 8 -> SA3D.Archival.Tex.GV.GVMMetaEntryAttributes
SA3D.Archival.Tex.GV.GVMMetaEntryAttributes.Dither = 4 -> SA3D.Archival.Tex.GV.GVMMetaEntryAttributes
SA3D.Archival.Tex.GV.GVMMetaEntryAttributes.LockGVR = 2 -> SA3D.Archival.Tex.GV.GVMMetaEntryAttributes
SA3D.Archival.Tex.GV.GVMMetaEntryAttributes.LockOrder = 1 -> SA3D.Archival.Tex.GV.GVMMetaEntryAttributes
SA3D.Archival.Tex.GV.GVP
SA3D.Archival.Tex.GV.GVP.BankOffset.get -> ushort
SA3D.Archival.Tex.GV.GVP.EntryOffset.get -> ushort
SA3D.Archival.Tex.GV.GVP.PaletteFormat.get -> SA3D.Archival.Tex.GV.GVPaletteFormat
SA3D.Archival.Tex.GV.GVP.PaletteFormat.set -> void
SA3D.Archival.Tex.GV.GVP.WriteGVP(SA3D.Common.IO.EndianStackWriter! writer) -> void
SA3D.Archival.Tex.GV.GVP.WriteGVP(System.IO.Stream! stream) -> void
SA3D.Archival.Tex.GV.GVP.WriteGVPToBytes() -> byte[]!
SA3D.Archival.Tex.GV.GVP.WriteGVPToFile(string! filepath) -> void
SA3D.Archival.Tex.GV.GVPaletteFormat
SA3D.Archival.Tex.GV.GVPaletteFormat.IntensityA8 = 0 -> SA3D.Archival.Tex.GV.GVPaletteFormat
SA3D.Archival.Tex.GV.GVPaletteFormat.Rgb565 = 1 -> SA3D.Archival.Tex.GV.GVPaletteFormat
SA3D.Archival.Tex.GV.GVPaletteFormat.Rgb5a3 = 2 -> SA3D.Archival.Tex.GV.GVPaletteFormat
SA3D.Archival.Tex.GV.GVR
SA3D.Archival.Tex.GV.GVR.ArchiveMetaEntryAttributes.get -> SA3D.Archival.Tex.GV.GVMMetaEntryAttributes
SA3D.Archival.Tex.GV.GVR.ArchiveMetaEntryAttributes.set -> void
SA3D.Archival.Tex.GV.GVR.ConversionArguments.get -> string!
SA3D.Archival.Tex.GV.GVR.ConversionArguments.set -> void
SA3D.Archival.Tex.GV.GVR.InternalPalette.get -> SA3D.Archival.Tex.GV.GVP?
SA3D.Archival.Tex.GV.GVR.InternalPalette.set -> void
SA3D.Archival.Tex.GV.GVR.OriginalFilePath.get -> string!
SA3D.Archival.Tex.GV.GVR.OriginalFilePath.set -> void
SA3D.Archival.Tex.GV.GVR.OriginalImageData.get -> byte[]!
SA3D.Archival.Tex.GV.GVR.OriginalImageData.set -> void
SA3D.Archival.Tex.GV.GVR.PixelFormat.get -> SA3D.Archival.Tex.GV.GVRPixelFormat
SA3D.Archival.Tex.GV.GVR.WriteGVR(SA3D.Common.IO.EndianStackWriter! writer) -> void
SA3D.Archival.Tex.GV.GVR.WriteGVR(SA3D.Common.IO.EndianStackWriter! writer, bool includeGlobalIndex) -> void
SA3D.Archival.Tex.GV.GVR.WriteGVR(System.IO.Stream! stream) -> void
SA3D.Archival.Tex.GV.GVR.WriteGVR(System.IO.Stream! stream, bool includeGlobalIndex) -> void
SA3D.Archival.Tex.GV.GVR.WriteGVRToBytes(bool includeGlobalIndex = true) -> byte[]!
SA3D.Archival.Tex.GV.GVR.WriteGVRToFile(string! filepath, bool includeGlobalIndex = true) -> void
SA3D.Archival.Tex.GV.GVRPixelFormat
SA3D.Archival.Tex.GV.GVRPixelFormat.ARGB8 = 6 -> SA3D.Archival.Tex.GV.GVRPixelFormat
SA3D.Archival.Tex.GV.GVRPixelFormat.DXT1 = 14 -> SA3D.Archival.Tex.GV.GVRPixelFormat
SA3D.Archival.Tex.GV.GVRPixelFormat.Index4 = 8 -> SA3D.Archival.Tex.GV.GVRPixelFormat
SA3D.Archival.Tex.GV.GVRPixelFormat.Index8 = 9 -> SA3D.Archival.Tex.GV.GVRPixelFormat
SA3D.Archival.Tex.GV.GVRPixelFormat.Intensity4 = 0 -> SA3D.Archival.Tex.GV.GVRPixelFormat
SA3D.Archival.Tex.GV.GVRPixelFormat.Intensity8 = 1 -> SA3D.Archival.Tex.GV.GVRPixelFormat
SA3D.Archival.Tex.GV.GVRPixelFormat.IntensityA4 = 2 -> SA3D.Archival.Tex.GV.GVRPixelFormat
SA3D.Archival.Tex.GV.GVRPixelFormat.IntensityA8 = 3 -> SA3D.Archival.Tex.GV.GVRPixelFormat
SA3D.Archival.Tex.GV.GVRPixelFormat.RGB565 = 4 -> SA3D.Archival.Tex.GV.GVRPixelFormat
SA3D.Archival.Tex.GV.GVRPixelFormat.RGB5A3 = 5 -> SA3D.Archival.Tex.GV.GVRPixelFormat
SA3D.Archival.Tex.PV.PVEnumExtensions
SA3D.Archival.Tex.PV.PVM
SA3D.Archival.Tex.PV.PVM.Comment.get -> string!
SA3D.Archival.Tex.PV.PVM.Comment.set -> void
SA3D.Archival.Tex.PV.PVM.ConverterName.get -> string!
SA3D.Archival.Tex.PV.PVM.ConverterName.set -> void
SA3D.Archival.Tex.PV.PVM.ExportPVPsAsFiles(string! folderPath) -> void
SA3D.Archival.Tex.PV.PVM.ExportPVRsAsFiles(string! folderPath, bool includeGlobalIndices) -> void
SA3D.Archival.Tex.PV.PVM.ModelNames.get -> System.Collections.Generic.List<string!>!
SA3D.Archival.Tex.PV.PVM.PVM() -> void
SA3D.Archival.Tex.PV.PVM.PVPs.get -> System.Collections.Generic.List<SA3D.Archival.Tex.PV.PVP!>!
SA3D.Archival.Tex.PV.PVM.PVRs.get -> System.Collections.Generic.List<SA3D.Archival.Tex.PV.PVR!>!
SA3D.Archival.Tex.PV.PVM.WritePVM(SA3D.Common.IO.EndianStackWriter! writer) -> void
SA3D.Archival.Tex.PV.PVM.WritePVM(SA3D.Common.IO.EndianStackWriter! writer, SA3D.Archival.Tex.PV.PVMMetadataIncludes includes) -> void
SA3D.Archival.Tex.PV.PVM.WritePVM(System.IO.Stream! stream) -> void
SA3D.Archival.Tex.PV.PVM.WritePVM(System.IO.Stream! stream, SA3D.Archival.Tex.PV.PVMMetadataIncludes includes) -> void
SA3D.Archival.Tex.PV.PVM.WritePVMToByte() -> byte[]!
SA3D.Archival.Tex.PV.PVM.WritePVMToBytes(SA3D.Archival.Tex.PV.PVMMetadataIncludes includes) -> byte[]!
SA3D.Archival.Tex.PV.PVM.WritePVMToFile(string! filepath) -> void
SA3D.Archival.Tex.PV.PVM.WritePVMToFile(string! filepath, SA3D.Archival.Tex.PV.PVMMetadataIncludes includes) -> void
SA3D.Archival.Tex.PV.PVMMetadataIncludes
SA3D.Archival.Tex.PV.PVMMetadataIncludes.IncludeCategoryCodes.get -> bool
SA3D.Archival.Tex.PV.PVMMetadataIncludes.IncludeCategoryCodes.set -> void
SA3D.Archival.Tex.PV.PVMMetadataIncludes.IncludeEntryInfo.get -> bool
SA3D.Archival.Tex.PV.PVMMetadataIncludes.IncludeEntryInfo.set -> void
SA3D.Archival.Tex.PV.PVMMetadataIncludes.IncludeGlobalIndices.get -> bool
SA3D.Archival.Tex.PV.PVMMetadataIncludes.IncludeGlobalIndices.set -> void
SA3D.Archival.Tex.PV.PVMMetadataIncludes.IncludeNames.get -> bool
SA3D.Archival.Tex.PV.PVMMetadataIncludes.IncludeNames.set -> void
SA3D.Archival.Tex.PV.PVMMetadataIncludes.PVMMetadataIncludes() -> void
SA3D.Archival.Tex.PV.PVMMetaEntryAttributes
SA3D.Archival.Tex.PV.PVMMetaEntryAttributes.AlphaDither = 8 -> SA3D.Archival.Tex.PV.PVMMetaEntryAttributes
SA3D.Archival.Tex.PV.PVMMetaEntryAttributes.Dither = 4 -> SA3D.Archival.Tex.PV.PVMMetaEntryAttributes
SA3D.Archival.Tex.PV.PVMMetaEntryAttributes.LockOrder = 1 -> SA3D.Archival.Tex.PV.PVMMetaEntryAttributes
SA3D.Archival.Tex.PV.PVMMetaEntryAttributes.LockPVR = 2 -> SA3D.Archival.Tex.PV.PVMMetaEntryAttributes
SA3D.Archival.Tex.PV.PVP
SA3D.Archival.Tex.PV.PVP.BankOffset.get -> ushort
SA3D.Archival.Tex.PV.PVP.EntryOffset.get -> ushort
SA3D.Archival.Tex.PV.PVP.PixelFormat.get -> SA3D.Archival.Tex.PV.PVRPixelFormat
SA3D.Archival.Tex.PV.PVP.PixelFormat.set -> void
SA3D.Archival.Tex.PV.PVP.WritePVP(SA3D.Common.IO.EndianStackWriter! writer) -> void
SA3D.Archival.Tex.PV.PVP.WritePVP(System.IO.Stream! stream) -> void
SA3D.Archival.Tex.PV.PVP.WritePVPToBytes() -> byte[]!
SA3D.Archival.Tex.PV.PVP.WritePVPToFile(string! filepath) -> void
SA3D.Archival.Tex.PV.PVR
SA3D.Archival.Tex.PV.PVR.ArchiveMetaEntryAttributes.get -> SA3D.Archival.Tex.PV.PVMMetaEntryAttributes
SA3D.Archival.Tex.PV.PVR.ArchiveMetaEntryAttributes.set -> void
SA3D.Archival.Tex.PV.PVR.ConversionArguments.get -> string!
SA3D.Archival.Tex.PV.PVR.ConversionArguments.set -> void
SA3D.Archival.Tex.PV.PVR.DataFormat.get -> SA3D.Archival.Tex.PV.PVRDataFormat
SA3D.Archival.Tex.PV.PVR.OriginalFilePath.get -> string!
SA3D.Archival.Tex.PV.PVR.OriginalFilePath.set -> void
SA3D.Archival.Tex.PV.PVR.OriginalImageData.get -> byte[]!
SA3D.Archival.Tex.PV.PVR.OriginalImageData.set -> void
SA3D.Archival.Tex.PV.PVR.PixelFormat.get -> SA3D.Archival.Tex.PV.PVRPixelFormat
SA3D.Archival.Tex.PV.PVR.WritePVR(SA3D.Common.IO.EndianStackWriter! writer) -> void
SA3D.Archival.Tex.PV.PVR.WritePVR(SA3D.Common.IO.EndianStackWriter! writer, bool includeGlobalIndex) -> void
SA3D.Archival.Tex.PV.PVR.WritePVR(System.IO.Stream! stream) -> void
SA3D.Archival.Tex.PV.PVR.WritePVR(System.IO.Stream! stream, bool includeGlobalIndex) -> void
SA3D.Archival.Tex.PV.PVR.WritePVRToByteData(bool includeGlobalIndex = true) -> byte[]!
SA3D.Archival.Tex.PV.PVR.WritePVRToFile(string! filepath, bool includeGlobalIndex = true) -> void
SA3D.Archival.Tex.PV.PVRDataFormat
SA3D.Archival.Tex.PV.PVRDataFormat.Index4 = 5 -> SA3D.Archival.Tex.PV.PVRDataFormat
SA3D.Archival.Tex.PV.PVRDataFormat.Index4Mipmaps = 6 -> SA3D.Archival.Tex.PV.PVRDataFormat
SA3D.Archival.Tex.PV.PVRDataFormat.Index8 = 7 -> SA3D.Archival.Tex.PV.PVRDataFormat
SA3D.Archival.Tex.PV.PVRDataFormat.Index8Mipmaps = 8 -> SA3D.Archival.Tex.PV.PVRDataFormat
SA3D.Archival.Tex.PV.PVRDataFormat.Rectangle = 9 -> SA3D.Archival.Tex.PV.PVRDataFormat
SA3D.Archival.Tex.PV.PVRDataFormat.RectangleTwiddled = 13 -> SA3D.Archival.Tex.PV.PVRDataFormat
SA3D.Archival.Tex.PV.PVRDataFormat.SmallVq = 16 -> SA3D.Archival.Tex.PV.PVRDataFormat
SA3D.Archival.Tex.PV.PVRDataFormat.SmallVqMipmaps = 17 -> SA3D.Archival.Tex.PV.PVRDataFormat
SA3D.Archival.Tex.PV.PVRDataFormat.SquareTwiddled = 1 -> SA3D.Archival.Tex.PV.PVRDataFormat
SA3D.Archival.Tex.PV.PVRDataFormat.SquareTwiddledMipmaps = 2 -> SA3D.Archival.Tex.PV.PVRDataFormat
SA3D.Archival.Tex.PV.PVRDataFormat.SquareTwiddledMipmapsDMA = 18 -> SA3D.Archival.Tex.PV.PVRDataFormat
SA3D.Archival.Tex.PV.PVRDataFormat.Stride = 11 -> SA3D.Archival.Tex.PV.PVRDataFormat
SA3D.Archival.Tex.PV.PVRDataFormat.Vq = 3 -> SA3D.Archival.Tex.PV.PVRDataFormat
SA3D.Archival.Tex.PV.PVRDataFormat.VqMipmaps = 4 -> SA3D.Archival.Tex.PV.PVRDataFormat
SA3D.Archival.Tex.PV.PVRPixelFormat
SA3D.Archival.Tex.PV.PVRPixelFormat.ARGB1555 = 0 -> SA3D.Archival.Tex.PV.PVRPixelFormat
SA3D.Archival.Tex.PV.PVRPixelFormat.ARGB4 = 2 -> SA3D.Archival.Tex.PV.PVRPixelFormat
SA3D.Archival.Tex.PV.PVRPixelFormat.ARGB8 = 6 -> SA3D.Archival.Tex.PV.PVRPixelFormat
SA3D.Archival.Tex.PV.PVRPixelFormat.Bump = 4 -> SA3D.Archival.Tex.PV.PVRPixelFormat
SA3D.Archival.Tex.PV.PVRPixelFormat.RGB565 = 1 -> SA3D.Archival.Tex.PV.PVRPixelFormat
SA3D.Archival.Tex.PV.PVRPixelFormat.YUV422 = 3 -> SA3D.Archival.Tex.PV.PVRPixelFormat
SA3D.Archival.Tex.PVX.PVMX
SA3D.Archival.Tex.PVX.PVMX.PVMX() -> void
SA3D.Archival.Tex.PVX.PVMX.PVRXs.get -> System.Collections.Generic.List<SA3D.Archival.Tex.PVX.PVRX!>!
SA3D.Archival.Tex.PVX.PVRX
SA3D.Archival.Tex.PVX.PVRX.HasDimensions.get -> bool
SA3D.Archival.Tex.PVX.PVRX.WritePVRX(SA3D.Common.IO.EndianStackWriter! writer) -> void
SA3D.Archival.Tex.PVX.PVRX.WritePVRX(System.IO.Stream! stream) -> void
SA3D.Archival.Tex.PVX.PVRX.WritePVRXToBytes() -> byte[]!
SA3D.Archival.Tex.PVX.PVRX.WritePVRXToFile(string! filepath) -> void
SA3D.Archival.Tex.TextureArchive
SA3D.Archival.Tex.TextureArchive.TextureArchive() -> void
SA3D.Archival.Tex.TextureArchiveEntry
SA3D.Archival.Tex.TextureArchiveEntry.GetMipmap(int mipmapIndex) -> SA3D.Texturing.Texture!
SA3D.Archival.Tex.TextureArchiveEntry.GetMipmaps() -> SA3D.Texturing.Texture![]!
SA3D.Archival.Tex.TextureArchiveEntry.GlobalIndex.get -> uint
SA3D.Archival.Tex.TextureArchiveEntry.GlobalIndex.set -> void
SA3D.Archival.Tex.TextureArchiveEntry.Height.get -> int
SA3D.Archival.Tex.TextureArchiveEntry.MipMapCount.get -> int
SA3D.Archival.Tex.TextureArchiveEntry.RequiresPallet.get -> bool
SA3D.Archival.Tex.TextureArchiveEntry.TextureArchiveEntry(byte[]! data, uint globalIndex, int width, int height, string! name) -> void
SA3D.Archival.Tex.TextureArchiveEntry.Width.get -> int
SA3D.Archival.VectorQuantization
static readonly SA3D.Archival.Tex.GV.GVMMetadataIncludes.IncludeAll -> SA3D.Archival.Tex.GV.GVMMetadataIncludes
static readonly SA3D.Archival.Tex.PV.PVMMetadataIncludes.IncludeAll -> SA3D.Archival.Tex.PV.PVMMetadataIncludes
static SA3D.Archival.Archive.ReadArchive(byte[]! data, uint address) -> SA3D.Archival.Archive!
static SA3D.Archival.Archive.ReadArchive(byte[]! data, uint address, string! filename) -> SA3D.Archival.Archive!
static SA3D.Archival.Archive.ReadArchive(SA3D.Common.IO.EndianStackReader! reader, uint address) -> SA3D.Archival.Archive!
static SA3D.Archival.Archive.ReadArchive(SA3D.Common.IO.EndianStackReader! reader, uint address, string! filename) -> SA3D.Archival.Archive!
static SA3D.Archival.Archive.ReadArchiveFromFile(string! filepath) -> SA3D.Archival.Archive!
static SA3D.Archival.PAK.PAKArchive.CheckIsPAKArchive(byte[]! data, uint address) -> bool
static SA3D.Archival.PAK.PAKArchive.CheckIsPAKArchive(SA3D.Common.IO.EndianStackReader! reader, uint address) -> bool
static SA3D.Archival.PAK.PAKArchive.FromTextureSet(SA3D.Texturing.TextureSet! textureSet, string! folderName, string! itemBasePath, bool storeIndexInAlpha = false, bool useDDS = false) -> SA3D.Archival.PAK.PAKArchive!
static SA3D.Archival.PAK.PAKArchive.ReadPAKArchive(byte[]! data, uint address) -> SA3D.Archival.PAK.PAKArchive!
static SA3D.Archival.PAK.PAKArchive.ReadPAKArchive(byte[]! data, uint address, string! folderName) -> SA3D.Archival.PAK.PAKArchive!
static SA3D.Archival.PAK.PAKArchive.ReadPAKArchive(SA3D.Common.IO.EndianStackReader! reader, uint address) -> SA3D.Archival.PAK.PAKArchive!
static SA3D.Archival.PAK.PAKArchive.ReadPAKArchive(SA3D.Common.IO.EndianStackReader! reader, uint address, string! folderName) -> SA3D.Archival.PAK.PAKArchive!
static SA3D.Archival.PAK.PAKArchive.ReadPAKArchiveFromFile(string! filePath) -> SA3D.Archival.PAK.PAKArchive!
static SA3D.Archival.PAK.PAKTextureInfo.Read(SA3D.Common.IO.EndianStackReader! reader, uint address) -> SA3D.Archival.PAK.PAKTextureInfo
static SA3D.Archival.PRS.CompressPRS(byte[]! data) -> byte[]!
static SA3D.Archival.PRS.DecompressPRS(byte[]! data, uint outLength = 0) -> byte[]!
static SA3D.Archival.PRS.ReadPRSFile(string! filepath) -> byte[]!
static SA3D.Archival.Tex.GV.GVM.CheckIsGVM(byte[]! data, uint address) -> bool
static SA3D.Archival.Tex.GV.GVM.CheckIsGVM(SA3D.Common.IO.EndianStackReader! reader, uint address) -> bool
static SA3D.Archival.Tex.GV.GVM.CheckIsGVMFile(string! filepath) -> bool
static SA3D.Archival.Tex.GV.GVM.FromTextureSet(SA3D.Texturing.TextureSet! textureSet, SA3D.Archival.Tex.GV.GVRPixelFormat? pixelFormat = null, bool mipmaps = true, SA3D.Archival.Tex.GV.GVPaletteFormat paletteFormat = SA3D.Archival.Tex.GV.GVPaletteFormat.Rgb5a3, bool dither = true) -> SA3D.Archival.Tex.GV.GVM!
static SA3D.Archival.Tex.GV.GVM.ReadGVM(byte[]! data, uint address) -> SA3D.Archival.Tex.GV.GVM!
static SA3D.Archival.Tex.GV.GVM.ReadGVM(SA3D.Common.IO.EndianStackReader! reader, uint address) -> SA3D.Archival.Tex.GV.GVM!
static SA3D.Archival.Tex.GV.GVM.ReadGVMFromFile(string! filepath) -> SA3D.Archival.Tex.GV.GVM!
static SA3D.Archival.Tex.GV.GVP.CheckIsGVP(byte[]! data, uint address) -> bool
static SA3D.Archival.Tex.GV.GVP.CheckIsGVP(SA3D.Common.IO.EndianStackReader! reader, uint address) -> bool
static SA3D.Archival.Tex.GV.GVP.CheckIsGVPFile(string! filepath) -> bool
static SA3D.Archival.Tex.GV.GVP.FromColors(byte[]! colors, SA3D.Archival.Tex.GV.GVPaletteFormat format = SA3D.Archival.Tex.GV.GVPaletteFormat.Rgb5a3, ushort entryOffset = 0, ushort bankOffset = 0) -> SA3D.Archival.Tex.GV.GVP!
static SA3D.Archival.Tex.GV.GVP.FromTexturePalette(SA3D.Texturing.TexturePalette! palette, SA3D.Archival.Tex.GV.GVPaletteFormat format = SA3D.Archival.Tex.GV.GVPaletteFormat.Rgb5a3, ushort entryOffset = 0, ushort bankOffset = 0) -> SA3D.Archival.Tex.GV.GVP!
static SA3D.Archival.Tex.GV.GVP.ReadGVP(byte[]! data, uint address) -> SA3D.Archival.Tex.GV.GVP!
static SA3D.Archival.Tex.GV.GVP.ReadGVP(byte[]! data, uint address, string! name) -> SA3D.Archival.Tex.GV.GVP!
static SA3D.Archival.Tex.GV.GVP.ReadGVP(SA3D.Common.IO.EndianStackReader! reader, uint address) -> SA3D.Archival.Tex.GV.GVP!
static SA3D.Archival.Tex.GV.GVP.ReadGVP(SA3D.Common.IO.EndianStackReader! reader, uint address, string! name) -> SA3D.Archival.Tex.GV.GVP!
static SA3D.Archival.Tex.GV.GVP.ReadGVPFromFile(string! filepath) -> SA3D.Archival.Tex.GV.GVP!
static SA3D.Archival.Tex.GV.GVR.CheckIsGVR(byte[]! data, uint address) -> bool
static SA3D.Archival.Tex.GV.GVR.CheckIsGVR(SA3D.Common.IO.EndianStackReader! reader, uint address) -> bool
static SA3D.Archival.Tex.GV.GVR.CheckIsGVRFile(string! filepath) -> bool
static SA3D.Archival.Tex.GV.GVR.EncodeToGVR(SA3D.Texturing.Texture! texture, SA3D.Archival.Tex.GV.GVRPixelFormat pixelFormat = SA3D.Archival.Tex.GV.GVRPixelFormat.DXT1, bool mipmaps = true, SA3D.Archival.Tex.GV.GVPaletteFormat paletteFormat = SA3D.Archival.Tex.GV.GVPaletteFormat.Rgb5a3, bool dither = true) -> SA3D.Archival.Tex.GV.GVR!
static SA3D.Archival.Tex.GV.GVR.ReadGVR(byte[]! data, uint address) -> SA3D.Archival.Tex.GV.GVR!
static SA3D.Archival.Tex.GV.GVR.ReadGVR(byte[]! data, uint address, string! name) -> SA3D.Archival.Tex.GV.GVR!
static SA3D.Archival.Tex.GV.GVR.ReadGVR(SA3D.Common.IO.EndianStackReader! reader, uint address) -> SA3D.Archival.Tex.GV.GVR!
static SA3D.Archival.Tex.GV.GVR.ReadGVR(SA3D.Common.IO.EndianStackReader! reader, uint address, string! name) -> SA3D.Archival.Tex.GV.GVR!
static SA3D.Archival.Tex.GV.GVR.ReadGVRFromFile(string! filepath) -> SA3D.Archival.Tex.GV.GVR!
static SA3D.Archival.Tex.PV.PVEnumExtensions.CheckNeedsExternalPalette(this SA3D.Archival.Tex.PV.PVRDataFormat dataFormat) -> bool
static SA3D.Archival.Tex.PV.PVM.CheckIsPVM(byte[]! data, uint address) -> bool
static SA3D.Archival.Tex.PV.PVM.CheckIsPVM(SA3D.Common.IO.EndianStackReader! reader, uint address) -> bool
static SA3D.Archival.Tex.PV.PVM.CheckIsPVMFile(string! filepath) -> bool
static SA3D.Archival.Tex.PV.PVM.FromTextureSet(SA3D.Texturing.TextureSet! textureSet, SA3D.Archival.Tex.PV.PVRPixelFormat pixelFormat = SA3D.Archival.Tex.PV.PVRPixelFormat.ARGB4, SA3D.Archival.Tex.PV.PVRDataFormat dataFormat = SA3D.Archival.Tex.PV.PVRDataFormat.Rectangle, bool dither = true) -> SA3D.Archival.Tex.PV.PVM!
static SA3D.Archival.Tex.PV.PVM.ReadPVM(byte[]! data, uint address) -> SA3D.Archival.Tex.PV.PVM!
static SA3D.Archival.Tex.PV.PVM.ReadPVM(SA3D.Common.IO.EndianStackReader! reader, uint address) -> SA3D.Archival.Tex.PV.PVM!
static SA3D.Archival.Tex.PV.PVM.ReadPVMFromFile(string! filepath) -> SA3D.Archival.Tex.PV.PVM!
static SA3D.Archival.Tex.PV.PVP.CheckIsPVP(byte[]! data, uint address) -> bool
static SA3D.Archival.Tex.PV.PVP.CheckIsPVP(SA3D.Common.IO.EndianStackReader! reader, uint address) -> bool
static SA3D.Archival.Tex.PV.PVP.CheckIsPVPFile(string! filepath) -> bool
static SA3D.Archival.Tex.PV.PVP.FromColors(byte[]! colors, SA3D.Archival.Tex.PV.PVRPixelFormat format = SA3D.Archival.Tex.PV.PVRPixelFormat.ARGB8, ushort entryOffset = 0, ushort bankOffset = 0) -> SA3D.Archival.Tex.PV.PVP!
static SA3D.Archival.Tex.PV.PVP.FromTexturePalette(SA3D.Texturing.TexturePalette! palette, SA3D.Archival.Tex.PV.PVRPixelFormat format = SA3D.Archival.Tex.PV.PVRPixelFormat.ARGB8, ushort entryOffset = 0, ushort bankOffset = 0) -> SA3D.Archival.Tex.PV.PVP!
static SA3D.Archival.Tex.PV.PVP.ReadPVP(byte[]! data, uint address) -> SA3D.Archival.Tex.PV.PVP!
static SA3D.Archival.Tex.PV.PVP.ReadPVP(byte[]! data, uint address, string! name) -> SA3D.Archival.Tex.PV.PVP!
static SA3D.Archival.Tex.PV.PVP.ReadPVP(SA3D.Common.IO.EndianStackReader! reader, uint address) -> SA3D.Archival.Tex.PV.PVP!
static SA3D.Archival.Tex.PV.PVP.ReadPVP(SA3D.Common.IO.EndianStackReader! reader, uint address, string! name) -> SA3D.Archival.Tex.PV.PVP!
static SA3D.Archival.Tex.PV.PVP.ReadPVPFromFile(string! filepath) -> SA3D.Archival.Tex.PV.PVP!
static SA3D.Archival.Tex.PV.PVR.CheckIsPVR(byte[]! data, uint address) -> bool
static SA3D.Archival.Tex.PV.PVR.CheckIsPVR(SA3D.Common.IO.EndianStackReader! reader, uint address) -> bool
static SA3D.Archival.Tex.PV.PVR.CheckIsPVRFile(string! filepath) -> bool
static SA3D.Archival.Tex.PV.PVR.EncodeToPVR(SA3D.Texturing.Texture! texture, out SA3D.Texturing.TexturePalette? palette, SA3D.Archival.Tex.PV.PVRPixelFormat pixelFormat = SA3D.Archival.Tex.PV.PVRPixelFormat.ARGB8, SA3D.Archival.Tex.PV.PVRDataFormat dataFormat = SA3D.Archival.Tex.PV.PVRDataFormat.Rectangle, bool dither = true) -> SA3D.Archival.Tex.PV.PVR!
static SA3D.Archival.Tex.PV.PVR.ReadPVR(byte[]! data, uint address) -> SA3D.Archival.Tex.PV.PVR!
static SA3D.Archival.Tex.PV.PVR.ReadPVR(byte[]! data, uint address, string! name) -> SA3D.Archival.Tex.PV.PVR!
static SA3D.Archival.Tex.PV.PVR.ReadPVR(SA3D.Common.IO.EndianStackReader! reader, uint address) -> SA3D.Archival.Tex.PV.PVR!
static SA3D.Archival.Tex.PV.PVR.ReadPVR(SA3D.Common.IO.EndianStackReader! reader, uint address, string! name) -> SA3D.Archival.Tex.PV.PVR!
static SA3D.Archival.Tex.PV.PVR.ReadPVRFromFile(string! filepath) -> SA3D.Archival.Tex.PV.PVR!
static SA3D.Archival.Tex.PVX.PVMX.CheckIsPVMX(byte[]! data, uint address) -> bool
static SA3D.Archival.Tex.PVX.PVMX.CheckIsPVMX(SA3D.Common.IO.EndianStackReader! reader, uint address) -> bool
static SA3D.Archival.Tex.PVX.PVMX.CheckIsPVMXFile(string! filepath) -> bool
static SA3D.Archival.Tex.PVX.PVMX.PVMXFromTextureSet(SA3D.Texturing.TextureSet! textureSet, bool indexInAlpha = false, bool useDDS = false) -> SA3D.Archival.Tex.PVX.PVMX!
static SA3D.Archival.Tex.PVX.PVMX.ReadPVMX(byte[]! data, uint address) -> SA3D.Archival.Tex.PVX.PVMX!
static SA3D.Archival.Tex.PVX.PVMX.ReadPVMX(SA3D.Common.IO.EndianStackReader! reader, uint address) -> SA3D.Archival.Tex.PVX.PVMX!
static SA3D.Archival.Tex.PVX.PVMX.ReadPVMXFromFile(string! filepath) -> SA3D.Archival.Tex.PVX.PVMX!
static SA3D.Archival.Tex.PVX.PVRX.CheckIsPVRX(byte[]! data, uint address) -> bool
static SA3D.Archival.Tex.PVX.PVRX.CheckIsPVRX(SA3D.Common.IO.EndianStackReader! reader, uint address) -> bool
static SA3D.Archival.Tex.PVX.PVRX.CheckIsPVRXFile(string! filepath) -> bool
static SA3D.Archival.Tex.PVX.PVRX.EncodeColoredToPVRX(SA3D.Texturing.Texture! texture, bool useDDS = false) -> SA3D.Archival.Tex.PVX.PVRX!
static SA3D.Archival.Tex.PVX.PVRX.EncodeIndexedToPVRX(SA3D.Texturing.IndexTexture! texture, bool indexInAlpha = false, bool useDDS = false) -> SA3D.Archival.Tex.PVX.PVRX!
static SA3D.Archival.Tex.PVX.PVRX.ReadPVRX(byte[]! data, uint address) -> SA3D.Archival.Tex.PVX.PVRX!
static SA3D.Archival.Tex.PVX.PVRX.ReadPVRX(SA3D.Common.IO.EndianStackReader! reader, uint address) -> SA3D.Archival.Tex.PVX.PVRX!
static SA3D.Archival.Tex.PVX.PVRX.ReadPVRXFromFile(string! filepath) -> SA3D.Archival.Tex.PVX.PVRX!
static SA3D.Archival.Tex.TextureArchive.ReadTextureArchive(byte[]! data, uint address) -> SA3D.Archival.Tex.TextureArchive!
static SA3D.Archival.Tex.TextureArchive.ReadTextureArchive(SA3D.Common.IO.EndianStackReader! reader, uint address) -> SA3D.Archival.Tex.TextureArchive!
static SA3D.Archival.Tex.TextureArchive.ReadTextureArchiveFromFile(string! filepath) -> SA3D.Archival.Tex.TextureArchive!
static SA3D.Archival.VectorQuantization.QuantizeByteData(System.ReadOnlySpan<byte> data, int dimensions, int clusterLimit, int maxIterations = 10, int changeAndMergeThreshold = 31) -> (int[]! indices, byte[]! clusters)
virtual SA3D.Archival.Archive.ToTextureSet() -> SA3D.Texturing.TextureSet!
virtual SA3D.Archival.ArchiveEntry.ToTexture() -> SA3D.Texturing.Texture!
virtual SA3D.Archival.Tex.TextureArchiveEntry.HasMipMaps.get -> bool
virtual SA3D.Archival.Tex.TextureArchiveEntry.Index4.get -> bool?